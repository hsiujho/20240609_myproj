{
  "hash": "b65951299368506f91087462373a0901",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Pairing {quarto-shinylive} and {quarto-webr}\nformat:\n  html:\n    resources: \n      - shinylive-sw.js\nengine: knitr\nfilters:\n  - webr\n  - shinylive\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n## `{quarto-shinylive}`\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui <- page_sidebar(\n\n  # App title ----\n  title = \"Hello Shiny!\",\n\n  # Sidebar panel for inputs ----\n  sidebar = sidebar(\n\n    # Input: Slider for the number of bins ----\n    sliderInput(\n      inputId = \"bins\",\n      label = \"Number of bins:\",\n      min = 1,\n      max = 50,\n      value = 30\n    )\n  ),\n\n  # Output: Histogram ----\n  plotOutput(outputId = \"distPlot\")\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n\n  # Histogram of the Old Faithful Geyser Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot <- renderPlot({\n    x <- faithful$waiting\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n    hist(\n      x,\n      breaks = bins,\n      col = \"#75AADB\",\n      border = \"white\",\n      xlab = \"Waiting time to next eruption (in mins)\",\n      main = \"Histogram of waiting times\"\n    )\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n```\n\n## `{quarto-webr}`\n\n\n### Interactive\n\n```{webr-r}\nprint(\"Hello {quarto-webr} world!\")\n```\n\n### Non-interactive\n\n```{webr-r}\n#| context: output\ncat(\"And, this is a non-interactive cell\", fill = TRUE)\n```",
    "supporting": [
      "myproj_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}